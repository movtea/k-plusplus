# Указываем, что целевая система — macOS
set(CMAKE_SYSTEM_NAME Darwin)
set(CMAKE_SYSTEM_PROCESSOR x86_64)  # Или arm64, если требуется сборка под ARM (например, для Apple Silicon)

# задаем компиляторы для macOS
set(CMAKE_C_COMPILER clang)
set(CMAKE_CXX_COMPILER clang++)
set(CMAKE_INSTALL_NAME_TOOL /usr/bin/llvm-install-name-tool)

# Если компиляторы не найдены, выводим ошибку
if(NOT CMAKE_C_COMPILER)
    message(FATAL_ERROR "Clang C compiler not found! Please install Xcode or the Command Line Tools for macOS.")
endif()

if(NOT CMAKE_CXX_COMPILER)
    message(FATAL_ERROR "Clang C++ compiler not found! Please install Xcode or the Command Line Tools for macOS.")
endif()

# Указываем стандартные флаги для компиляции
set(CMAKE_C_FLAGS_INIT "-target x86_64-apple-darwin")  # Для сборки под Intel macOS
# set(CMAKE_C_FLAGS_INIT "-target arm64-apple-darwin")  # Для сборки под Apple Silicon

set(CMAKE_CXX_FLAGS_INIT "${CMAKE_C_FLAGS_INIT}")

# Настройка поиска системных библиотек и заголовков
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

# Указываем дополнительные флаги для совместимости с macOS
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -macosx-version-min=10.14")  # Минимальная поддерживаемая версия macOS
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -macosx-version-min=10.14")
